// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_tv_normal_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'tv_normal', line 10, column 3 to column 33)",
                                                      " (in 'tv_normal', line 11, column 3 to column 23)",
                                                      " (in 'tv_normal', line 14, column 2 to column 15)",
                                                      " (in 'tv_normal', line 15, column 2 to column 30)",
                                                      " (in 'tv_normal', line 18, column 3 to column 61)",
                                                      " (in 'tv_normal', line 19, column 3 to column 40)",
                                                      " (in 'tv_normal', line 17, column 18 to line 20, column 2)",
                                                      " (in 'tv_normal', line 17, column 1 to line 20, column 2)",
                                                      " (in 'tv_normal', line 32, column 2 to column 24)",
                                                      " (in 'tv_normal', line 33, column 2 to column 21)",
                                                      " (in 'tv_normal', line 34, column 2 to column 29)",
                                                      " (in 'tv_normal', line 36, column 4 to column 48)",
                                                      " (in 'tv_normal', line 37, column 4 to column 39)",
                                                      " (in 'tv_normal', line 38, column 4 to column 64)",
                                                      " (in 'tv_normal', line 35, column 18 to line 39, column 3)",
                                                      " (in 'tv_normal', line 35, column 2 to line 39, column 3)",
                                                      " (in 'tv_normal', line 24, column 4 to column 41)",
                                                      " (in 'tv_normal', line 23, column 2 to line 24, column 41)",
                                                      " (in 'tv_normal', line 25, column 4 to column 25)",
                                                      " (in 'tv_normal', line 28, column 4 to column 39)",
                                                      " (in 'tv_normal', line 27, column 2 to line 28, column 39)",
                                                      " (in 'tv_normal', line 29, column 2 to column 24)",
                                                      " (in 'tv_normal', line 2, column 5 to column 23)",
                                                      " (in 'tv_normal', line 3, column 14 to column 18)",
                                                      " (in 'tv_normal', line 3, column 5 to column 20)",
                                                      " (in 'tv_normal', line 4, column 16 to column 20)",
                                                      " (in 'tv_normal', line 4, column 5 to column 22)",
                                                      " (in 'tv_normal', line 5, column 13 to column 17)",
                                                      " (in 'tv_normal', line 5, column 5 to column 19)",
                                                      " (in 'tv_normal', line 6, column 5 to column 23)",
                                                      " (in 'tv_normal', line 7, column 12 to column 16)",
                                                      " (in 'tv_normal', line 7, column 18 to column 22)",
                                                      " (in 'tv_normal', line 7, column 5 to column 38)",
                                                      " (in 'tv_normal', line 10, column 23 to column 27)",
                                                      " (in 'tv_normal', line 14, column 9 to column 13)",
                                                      " (in 'tv_normal', line 15, column 24 to column 28)",
                                                      " (in 'tv_normal', line 32, column 9 to column 13)",
                                                      " (in 'tv_normal', line 33, column 9 to column 13)",
                                                      " (in 'tv_normal', line 34, column 9 to column 13)"};
#include <stan_meta_header.hpp>
class model_tv_normal final : public model_base_crtp<model_tv_normal> {
private:
  int Nobs;
  std::vector<int> Npos;
  std::vector<int> Ntotal;
  std::vector<int> Age;
  int Ymax;
  Eigen::Matrix<double, -1, -1> AgeExpoMatrix;
 
public:
  ~model_tv_normal() { }
  
  inline std::string model_name() const final { return "model_tv_normal"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_tv_normal(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_tv_normal_namespace::model_tv_normal";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 23;
      context__.validate_dims("data initialization","Nobs","int",
          context__.to_vec());
      Nobs = std::numeric_limits<int>::min();
      
      current_statement__ = 23;
      Nobs = context__.vals_i("Nobs")[(1 - 1)];
      current_statement__ = 23;
      current_statement__ = 23;
      check_greater_or_equal(function__, "Nobs", Nobs, 0);
      current_statement__ = 24;
      validate_non_negative_index("Npos", "Nobs", Nobs);
      current_statement__ = 25;
      context__.validate_dims("data initialization","Npos","int",
          context__.to_vec(Nobs));
      Npos = std::vector<int>(Nobs, std::numeric_limits<int>::min());
      
      current_statement__ = 25;
      assign(Npos, nil_index_list(), context__.vals_i("Npos"),
        "assigning variable Npos");
      current_statement__ = 26;
      validate_non_negative_index("Ntotal", "Nobs", Nobs);
      current_statement__ = 27;
      context__.validate_dims("data initialization","Ntotal","int",
          context__.to_vec(Nobs));
      Ntotal = std::vector<int>(Nobs, std::numeric_limits<int>::min());
      
      current_statement__ = 27;
      assign(Ntotal, nil_index_list(), context__.vals_i("Ntotal"),
        "assigning variable Ntotal");
      current_statement__ = 28;
      validate_non_negative_index("Age", "Nobs", Nobs);
      current_statement__ = 29;
      context__.validate_dims("data initialization","Age","int",
          context__.to_vec(Nobs));
      Age = std::vector<int>(Nobs, std::numeric_limits<int>::min());
      
      current_statement__ = 29;
      assign(Age, nil_index_list(), context__.vals_i("Age"),
        "assigning variable Age");
      current_statement__ = 30;
      context__.validate_dims("data initialization","Ymax","int",
          context__.to_vec());
      Ymax = std::numeric_limits<int>::min();
      
      current_statement__ = 30;
      Ymax = context__.vals_i("Ymax")[(1 - 1)];
      current_statement__ = 30;
      current_statement__ = 30;
      check_greater_or_equal(function__, "Ymax", Ymax, 1);
      current_statement__ = 31;
      validate_non_negative_index("AgeExpoMatrix", "Nobs", Nobs);
      current_statement__ = 32;
      validate_non_negative_index("AgeExpoMatrix", "Ymax", Ymax);
      current_statement__ = 33;
      context__.validate_dims("data initialization","AgeExpoMatrix","double",
          context__.to_vec(Nobs, Ymax));
      AgeExpoMatrix = Eigen::Matrix<double, -1, -1>(Nobs, Ymax);
      stan::math::fill(AgeExpoMatrix, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> AgeExpoMatrix_flat__;
        current_statement__ = 33;
        assign(AgeExpoMatrix_flat__, nil_index_list(),
          context__.vals_r("AgeExpoMatrix"),
          "assigning variable AgeExpoMatrix_flat__");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= Ymax; ++sym1__) {
          current_statement__ = 33;
          for (int sym2__ = 1; sym2__ <= Nobs; ++sym2__) {
            current_statement__ = 33;
            assign(AgeExpoMatrix,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              AgeExpoMatrix_flat__[(pos__ - 1)],
              "assigning variable AgeExpoMatrix");
            current_statement__ = 33;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 34;
      validate_non_negative_index("foi", "Ymax", Ymax);
      current_statement__ = 35;
      validate_non_negative_index("P", "Nobs", Nobs);
      current_statement__ = 36;
      validate_non_negative_index("ScalerDotProduct", "Nobs", Nobs);
      current_statement__ = 37;
      validate_non_negative_index("Npos_sim", "Nobs", Nobs);
      current_statement__ = 38;
      validate_non_negative_index("P_sim", "Nobs", Nobs);
      current_statement__ = 39;
      validate_non_negative_index("logLikelihood", "Nobs", Nobs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += Ymax;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_tv_normal_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, 1, -1> foi;
      foi = Eigen::Matrix<local_scalar_t__, 1, -1>(Ymax);
      stan::math::fill(foi, DUMMY_VAR__);
      
      current_statement__ = 1;
      foi = in__.row_vector(Ymax);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= Ymax; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(foi, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(foi[(sym1__ - 1)], 0, lp__),
            "assigning variable foi");
        } else {
          current_statement__ = 1;
          assign(foi, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(foi[(sym1__ - 1)], 0),
            "assigning variable foi");
        }}
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 2;
      sigma = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        sigma = stan::math::lb_constrain(sigma, 0, lp__);
      } else {
        current_statement__ = 2;
        sigma = stan::math::lb_constrain(sigma, 0);
      }
      std::vector<local_scalar_t__> P;
      P = std::vector<local_scalar_t__>(Nobs, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> ScalerDotProduct;
      ScalerDotProduct = std::vector<local_scalar_t__>(Nobs, DUMMY_VAR__);
      
      current_statement__ = 8;
      for (int i = 1; i <= Nobs; ++i) {
        current_statement__ = 5;
        assign(ScalerDotProduct, cons_list(index_uni(i), nil_index_list()),
          dot_product(
            rvalue(AgeExpoMatrix,
              cons_list(index_uni(i),
                cons_list(index_omni(), nil_index_list())), "AgeExpoMatrix"),
            foi), "assigning variable ScalerDotProduct");
        current_statement__ = 6;
        assign(P, cons_list(index_uni(i), nil_index_list()),
          (1 - stan::math::exp(-ScalerDotProduct[(i - 1)])),
          "assigning variable P");}
      {
        current_statement__ = 18;
        for (int i = 1; i <= Nobs; ++i) {
          current_statement__ = 17;
          lp_accum__.add(
            binomial_lpmf<propto__>(Npos[(i - 1)], Ntotal[(i - 1)],
              P[(i - 1)]));}
        current_statement__ = 19;
        lp_accum__.add(cauchy_lpdf<propto__>(sigma, 0, 1));
        current_statement__ = 21;
        for (int i = 2; i <= Ymax; ++i) {
          current_statement__ = 20;
          lp_accum__.add(
            normal_lpdf<propto__>(foi[(i - 1)], foi[((i - 1) - 1)], sigma));}
        current_statement__ = 22;
        lp_accum__.add(normal_lpdf<propto__>(foi[(1 - 1)], 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_tv_normal_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, 1, -1> foi;
      foi = Eigen::Matrix<double, 1, -1>(Ymax);
      stan::math::fill(foi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      foi = in__.row_vector(Ymax);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= Ymax; ++sym1__) {
        current_statement__ = 1;
        assign(foi, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(foi[(sym1__ - 1)], 0),
          "assigning variable foi");}
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma = in__.scalar();
      current_statement__ = 2;
      sigma = stan::math::lb_constrain(sigma, 0);
      std::vector<double> P;
      P = std::vector<double>(Nobs, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> ScalerDotProduct;
      ScalerDotProduct = std::vector<double>(Nobs, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= Ymax; ++sym1__) {
        vars__.emplace_back(foi[(sym1__ - 1)]);}
      vars__.emplace_back(sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 8;
      for (int i = 1; i <= Nobs; ++i) {
        current_statement__ = 5;
        assign(ScalerDotProduct, cons_list(index_uni(i), nil_index_list()),
          dot_product(
            rvalue(AgeExpoMatrix,
              cons_list(index_uni(i),
                cons_list(index_omni(), nil_index_list())), "AgeExpoMatrix"),
            foi), "assigning variable ScalerDotProduct");
        current_statement__ = 6;
        assign(P, cons_list(index_uni(i), nil_index_list()),
          (1 - stan::math::exp(-ScalerDotProduct[(i - 1)])),
          "assigning variable P");}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= Nobs; ++sym1__) {
          vars__.emplace_back(P[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= Nobs; ++sym1__) {
          vars__.emplace_back(ScalerDotProduct[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> Npos_sim;
      Npos_sim = Eigen::Matrix<double, -1, 1>(Nobs);
      stan::math::fill(Npos_sim, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> P_sim;
      P_sim = Eigen::Matrix<double, -1, 1>(Nobs);
      stan::math::fill(P_sim, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> logLikelihood;
      logLikelihood = Eigen::Matrix<double, -1, 1>(Nobs);
      stan::math::fill(logLikelihood, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 16;
      for (int i = 1; i <= Nobs; ++i) {
        current_statement__ = 12;
        assign(Npos_sim, cons_list(index_uni(i), nil_index_list()),
          binomial_rng(Ntotal[(i - 1)], P[(i - 1)], base_rng__),
          "assigning variable Npos_sim");
        current_statement__ = 13;
        assign(P_sim, cons_list(index_uni(i), nil_index_list()),
          (Npos_sim[(i - 1)] / Ntotal[(i - 1)]), "assigning variable P_sim");
        current_statement__ = 14;
        assign(logLikelihood, cons_list(index_uni(i), nil_index_list()),
          binomial_lpmf<false>(Npos[(i - 1)], Ntotal[(i - 1)], P[(i - 1)]),
          "assigning variable logLikelihood");}
      for (int sym1__ = 1; sym1__ <= Nobs; ++sym1__) {
        vars__.emplace_back(Npos_sim[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nobs; ++sym1__) {
        vars__.emplace_back(P_sim[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nobs; ++sym1__) {
        vars__.emplace_back(logLikelihood[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, 1, -1> foi;
      foi = Eigen::Matrix<double, 1, -1>(Ymax);
      stan::math::fill(foi, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> foi_flat__;
        current_statement__ = 1;
        assign(foi_flat__, nil_index_list(), context__.vals_r("foi"),
          "assigning variable foi_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= Ymax; ++sym1__) {
          current_statement__ = 1;
          assign(foi, cons_list(index_uni(sym1__), nil_index_list()),
            foi_flat__[(pos__ - 1)], "assigning variable foi");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, 1, -1> foi_free__;
      foi_free__ = Eigen::Matrix<double, 1, -1>(Ymax);
      stan::math::fill(foi_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= Ymax; ++sym1__) {
        current_statement__ = 1;
        assign(foi_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(foi[(sym1__ - 1)], 0),
          "assigning variable foi_free__");}
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      for (int sym1__ = 1; sym1__ <= Ymax; ++sym1__) {
        vars__.emplace_back(foi_free__[(sym1__ - 1)]);}
      vars__.emplace_back(sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("foi");
    names__.emplace_back("sigma");
    names__.emplace_back("P");
    names__.emplace_back("ScalerDotProduct");
    names__.emplace_back("Npos_sim");
    names__.emplace_back("P_sim");
    names__.emplace_back("logLikelihood");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Ymax)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nobs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nobs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nobs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nobs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nobs)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= Ymax; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "foi" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Nobs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "P" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nobs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ScalerDotProduct" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= Nobs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Npos_sim" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nobs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "P_sim" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nobs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "logLikelihood" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= Ymax; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "foi" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Nobs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "P" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nobs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ScalerDotProduct" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= Nobs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Npos_sim" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nobs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "P_sim" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nobs; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "logLikelihood" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"foi\",\"type\":{\"name\":\"vector\",\"length\":" << Ymax << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"P\",\"type\":{\"name\":\"array\",\"length\":" << Nobs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"ScalerDotProduct\",\"type\":{\"name\":\"array\",\"length\":" << Nobs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"Npos_sim\",\"type\":{\"name\":\"vector\",\"length\":" << Nobs << "},\"block\":\"generated_quantities\"},{\"name\":\"P_sim\",\"type\":{\"name\":\"vector\",\"length\":" << Nobs << "},\"block\":\"generated_quantities\"},{\"name\":\"logLikelihood\",\"type\":{\"name\":\"vector\",\"length\":" << Nobs << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"foi\",\"type\":{\"name\":\"vector\",\"length\":" << Ymax << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"P\",\"type\":{\"name\":\"array\",\"length\":" << Nobs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"ScalerDotProduct\",\"type\":{\"name\":\"array\",\"length\":" << Nobs << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"Npos_sim\",\"type\":{\"name\":\"vector\",\"length\":" << Nobs << "},\"block\":\"generated_quantities\"},{\"name\":\"P_sim\",\"type\":{\"name\":\"vector\",\"length\":" << Nobs << "},\"block\":\"generated_quantities\"},{\"name\":\"logLikelihood\",\"type\":{\"name\":\"vector\",\"length\":" << Nobs << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_tv_normal_namespace::model_tv_normal;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_tv_normal_namespace::profiles__;
}
#endif
#endif
